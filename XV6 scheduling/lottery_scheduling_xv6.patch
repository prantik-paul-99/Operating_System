diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..446bdd8
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "param.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 09d790c..8225721 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
+	rand.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
@@ -51,7 +52,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,11 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
+	_twt\
+	_childpro\
+	_allprinfo\
+	_lottery_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,14 +223,14 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
 
-qemu-memfs: xv6memfs.img
+qemu-memfs: xv6memfs.imgafter.num_processes
 	$(QEMU) -drive file=xv6memfs.img,index=0,media=disk,format=raw -smp $(CPUS) -m 256
 
 qemu-nox: fs.img xv6.img
@@ -250,7 +256,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c ps.c twt.c childpro.c allprinfo.c lottery_test.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/allprinfo.c b/allprinfo.c
new file mode 100644
index 0000000..2ad8555
--- /dev/null
+++ b/allprinfo.c
@@ -0,0 +1,22 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h" 
+#include "pstat.h"
+
+int main(int argc, char * argv[]){
+    struct pstat *p = malloc (sizeof(struct pstat));
+
+    int check;
+    check = getpinfo(p);
+    printf(1, "check %d \n", check);
+    printf(1, "inuse\t\t id\t\tttickets\t ticks\n");
+    if(check == 0){
+        for(int i = 0; i < NPROC; i++){
+            if(p->inuse[i])
+                printf(1, "%d \t\t  %d \t\t %d \t\t %d\n", p->inuse[i], p->pid[i], p->tickets[i], p->ticks[i]);
+            
+        }
+    }
+    exit();
+    
+}
\ No newline at end of file
diff --git a/childpro.c b/childpro.c
new file mode 100644
index 0000000..9bfb438
--- /dev/null
+++ b/childpro.c
@@ -0,0 +1,50 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+#include "pstat.h"
+
+int main(int argc, char * argv[])
+{
+    int pid;
+    int n = 1;
+
+    // if(argc < 2) {
+    //     n = 1; // default 1 process created
+    // }
+    // else {
+    //     // else, the number of processes supplied in the cmd
+    //     n = atoi(argv[1]);
+    // }
+
+    // if(n < 0 || n > 32) {
+    //     n = 2;
+    // }
+    
+
+    for(int i = 0; i < n; i++) {
+        pid = fork();
+        if(pid < 0) {
+            // this is the error branch
+            printf(1, "process : %d ; failed to reproduce\n", getpid());
+        }
+        else if(pid > 0) {
+            // this is the parent branch
+            printf(1, "process : %d ; created child : %d\n", getpid(), pid);
+            wait(); // wait for the children to return
+        }
+        else {
+            // this is the children branch
+            printf(1, "process : %d ; is a child\n", getpid());
+            if(argc >= 2) {
+                settickets(atoi(argv[1]));
+                printf(1, "%d tickets set to child : %d", getpid());
+            }
+
+            for(;;) {
+                // do nothing
+            }
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/defs.h b/defs.h
index 82fb982..51d2751 100644
--- a/defs.h
+++ b/defs.h
@@ -8,6 +8,7 @@ struct rtcdate;
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct pstat;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            getpinfo(struct pstat *pst);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/lottery_test.c b/lottery_test.c
new file mode 100644
index 0000000..d6fd19e
--- /dev/null
+++ b/lottery_test.c
@@ -0,0 +1,160 @@
+#include "types.h"
+#include "user.h"
+#include "pstat.h"
+
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 100
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+int get_num_processes(struct pstat *pst){
+    int count = 0;
+    for (int i = 0; i < NPROC; ++i) {
+        if(pst->inuse[i]==1)
+        {
+            count++;
+        }
+    }
+    return count;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, get_num_processes(&info), pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    int size1, size2;
+    size1 = size2 = -1;
+    getpinfo(&before);
+    // printf(1, "PID\tINUSE\tTICKETS\tTICKS\n");
+    // for (int i = 0; i < NPROC; ++i) {
+    //     if(before.inuse[i]!=0)
+    //     {
+    //         printf(1, "%d\t%d\t%d\t%d\n", before.pid[i], before.inuse[i], before.tickets[i], before.ticks[i]);
+    //     }
+    // }
+    sleep(num_seconds);
+    getpinfo(&after);
+    // printf(1, "PID\tINUSE\tTICKETS\tTICKS\n");
+    // for (int i = 0; i < NPROC; ++i) {
+    //     if(after.inuse[i]!=0)
+    //     {
+    //         printf(1, "%d\t%d\t%d\t%d\n", after.pid[i], after.inuse[i], after.tickets[i], after.ticks[i]);
+    //     }
+    // }
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    size1 = get_num_processes(&before);
+    size2 = get_num_processes(&after);
+    if (size1 >= NPROC || size2 >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    if (size1 < 0 || size2 < 0) {
+        printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, size1, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, size2, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            if (before.tickets[before_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            }
+            if (after.tickets[after_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index 806b1b1..945a0a3 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+#include "rand.h"
 
 struct {
   struct spinlock lock;
@@ -112,6 +114,10 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  // new process , so initialze tickets and ticks;
+  p->tickets = 1;
+  p->ticks = 0;
+
   return p;
 }
 
@@ -198,6 +204,11 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+
+  //set up tickets of childproc
+  np->tickets = np->parent->tickets;
+  np->ticks = 0;
+
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -295,6 +306,10 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+
+        p->tickets = 0; //make changes for new process
+        p->ticks = 0;
+
         release(&ptable.lock);
         return pid;
       }
@@ -319,6 +334,23 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+
+int
+get_total_tickets(void){
+  struct proc *p;
+  int total_tickets = 0;
+
+//add tickets of runnable processes
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state== RUNNABLE){
+      total_tickets += p->tickets;
+    }
+  }
+  return total_tickets;
+}
+
 void
 scheduler(void)
 {
@@ -332,23 +364,55 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    int total_tickets = get_total_tickets();
+    int ticket_count = 0;
+
+    int lottery_value = next_random();
+    int lottery_ticket = 1;
+
+    if(total_tickets!=0)
+    {
+      lottery_ticket = (lottery_value%total_tickets)+1;
+    }
+    
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      ticket_count += p->tickets;
+      if(ticket_count < lottery_ticket)
+        continue;
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
+    
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
 
+      // accumulate time
+
+      acquire(&tickslock);
+      int starttime = ticks;
+      release(&tickslock);
+
       swtch(&(c->scheduler), p->context);
+
+      acquire(&tickslock);
+      int endtime = ticks;
+      release(&tickslock);
+
+      p->ticks+=(endtime-starttime);
+
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -532,3 +596,33 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+//populate pstat called from system call
+
+void
+getpinfo(struct pstat *pst)
+{
+  acquire(&ptable.lock);
+  int i;
+  struct proc *p;
+
+  for(i = 0; i < NPROC; i++)
+  {
+    p = &ptable.proc[i];
+    if(p->state == UNUSED)
+    {
+      pst->inuse[i] = 0;
+      pst->pid[i] = -1;
+      pst->tickets[i] = -1;
+      pst->ticks[i] = -1;
+    }
+    else
+    {
+      pst->inuse[i] = 1;
+      pst->pid[i] = p->pid;
+      pst->tickets[i] = p->tickets;
+      pst->ticks[i] = p->ticks;
+    }
+  }
+  release(&ptable.lock);
+}
diff --git a/proc.h b/proc.h
index 1647114..f8f0210 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint tickets;
+  uint ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..26df407
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "mmu.h"
+#include "param.h"
+#include "proc.h"
+#include "user.h"
+#include "pstat.h" 
+
+int main(int argc, char *argv[])
+{
+    struct pstat info;
+    getpinfo(&info);
+
+    printf(1, "PID\tINUSE\tTICKETS\tTICKS\n");
+    for (int i = 0; i < NPROC; ++i) {
+        printf(1, "%d\t%d\t%d\t%d\n", info.pid[i], info.inuse[i], info.tickets[i], info.ticks[i]);
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..f328614
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,11 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+    int inuse[NPROC];  // whether this slot of the process table is in use (1 or 0)
+    int tickets[NPROC]; // the number of tickets this process has
+    int pid[NPROC]; // the PID of each process
+    int ticks[NPROC]; // the number of ticks each process has accumulated
+};
+#endif  // _PSTAT_H_
\ No newline at end of file
diff --git a/rand.c b/rand.c
new file mode 100644
index 0000000..dc9aed4
--- /dev/null
+++ b/rand.c
@@ -0,0 +1,39 @@
+static unsigned random_seed = 1;
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
+unsigned lcg_parkmiller(unsigned *state)
+{
+    const unsigned N = 0x7fffffff;
+    const unsigned G = 48271u;
+
+    /*  
+        Indirectly compute state*G%N.
+
+        Let:
+          div = state/(N/G)
+          rem = state%(N/G)
+
+        Then:
+          rem + div*(N/G) == state
+          rem*G + div*(N/G)*G == state*G
+
+        Now:
+          div*(N/G)*G == div*(N - N%G) === -div*(N%G)  (mod N)
+
+        Therefore:
+          rem*G - div*(N%G) === state*G  (mod N)
+
+        Add N if necessary so that the result is between 1 and N-1.
+    */
+    unsigned div = *state / (N / G);  /* max : 2,147,483,646 / 44,488 = 48,271 */
+    unsigned rem = *state % (N / G);  /* max : 2,147,483,646 % 44,488 = 44,487 */
+
+    unsigned a = rem * G;        /* max : 44,487 * 48,271 = 2,147,431,977 */
+    unsigned b = div * (N % G);  /* max : 48,271 * 3,399 = 164,073,129 */
+
+    return *state = (a > b) ? (a - b) : (a + (N - b));
+}
+
+unsigned next_random() {
+    return lcg_parkmiller(&random_seed);
+}
diff --git a/rand.h b/rand.h
new file mode 100644
index 0000000..e2d6db1
--- /dev/null
+++ b/rand.h
@@ -0,0 +1,2 @@
+unsigned next_random();
+unsigned lcg_parkmiller(unsigned *state);
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..0398ed2 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_yield]   sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..becc6e2 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_yield 24
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..fd0212a 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,37 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_settickets(void)
+{
+  int num;
+  if(argint(0, &num) < 0)
+    return -1;
+
+  if (num<1)
+    return -1;
+  
+  myproc()->tickets = num;
+  return 0;
+}
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *pst;
+
+  if(argptr(0,(void*)&pst, sizeof(*pst)) < 0)
+    return -1;
+    
+  getpinfo(pst);
+
+  return 0;
+}
+
+int
+sys_yield(void)
+{
+  yield();
+  return 0;
+}
diff --git a/twt.c b/twt.c
new file mode 100644
index 0000000..28ca6dd
--- /dev/null
+++ b/twt.c
@@ -0,0 +1,60 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+const int child_cnt = 5;
+
+__attribute__((noreturn))
+void function() {
+    while(1){
+        __asm__("");
+    }
+}
+
+int
+main(int argc, char *argv[])
+{
+    int pids[child_cnt];
+
+    for(int i = 0; i<child_cnt; i++){
+        int p;
+        if((p = fork()) == 0){
+            //settickets(i);
+            //settickets(33);
+            //settickets(child_cnt-i);
+            settickets((child_cnt-i)*10);
+            function();
+        }
+        else if(p < -1){
+            printf(1, "oh no \n");
+        }
+        else {
+            pids[i] = p;
+        }
+    }
+
+
+    sleep(200);
+
+    struct pstat info;
+    getpinfo(&info);
+    printf(1, "PID\tTICKETS\tTICKS\n");
+    for(int i = 0; i<child_cnt; i++){
+        for(int j = 0; j<NPROC; j++){
+            if(info.inuse[j] == 1 && info.pid[j] == pids[i]){
+                printf(1, "%d\t%d\t%d\n", info.pid[j], info.tickets[j], info.ticks[j]);
+                break;
+            }
+        }
+    }
+
+    for(int i = 0; i<child_cnt; i++){
+        kill(pids[i]);
+    }
+
+    for(int i = 0; i<child_cnt; i++){
+        wait();
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..8c78d46 100644
--- a/user.h
+++ b/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 struct rtcdate;
 
 // system calls
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
+int yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..6b3ded2 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
+SYSCALL(yield)
\ No newline at end of file
diff --git a/x86.h b/x86.h
index 07312a5..cf40780 100644
--- a/x86.h
+++ b/x86.h
@@ -117,6 +117,12 @@ sti(void)
   asm volatile("sti");
 }
 
+static inline void
+hlt(void)
+{
+  asm volatile("hlt" : : );
+}
+
 static inline uint
 xchg(volatile uint *addr, uint newval)
 {
